{"mappings":"AAAA,iEAAiE;AACjE,MAAM,OAAO,SAAS,cAAc,CAAC;AACrC,MAAM,SAAS,SAAS,aAAa,CAAC,uBAAuB,oBAAoB;AACjF,MAAM,WAAW,SAAS,cAAc,CAAC;AACzC,MAAM,YAAY,SAAS,cAAc,CAAC;AAG1C,kCAAkC;AAClC,wEAAwE;AACxE,OAAO,gBAAgB,CAAC,SAAS,SAAS,KAAK;IAC7C,MAAM,cAAc,IAAI,0DAA0D;IAElF,IAAI,OAAO,KAAK,QAAQ,CAAC,IAAI,CAAC,KAAK,EAAE,sCAAsC;IAC3E,6BAA6B;IAE7B,IAAI,OAAO,AAAC,IAAI,OAAQ,kBAAkB,CAAC,SAAS,8BAA8B;;IAElF,oCAAoC;IACpC,QAAQ,MAAM,MAAM,cAAc,OAAO;QAAC;QAAK;KAAK,EAAE;IAEtD,6EAA6E;IAC7E,QAAQ,GAAG,CAAC;AACd;AAEA,eAAe;IACb,IAAI;QACF,MAAM,WAAW,MAAM,MAAM;QAC7B,IAAI,CAAC,SAAS,EAAE,EACd,MAAM,IAAI,MAAM,CAAC,oBAAoB,EAAE,SAAS,MAAM,CAAC,CAAC;QAE1D,MAAM,OAAO,MAAM,SAAS,IAAI;QAChC,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,wBAAwB;QACtC,OAAO;IACT;AACF;AAEA,iBAAiB;AACjB,YACG,IAAI,CAAC,CAAA;IACJ,IAAI,MACF,QAAQ,GAAG,CAAC,iBAAiB;SAG7B,QAAQ,GAAG,CAAC;AAEhB,GACC,KAAK,CAAC,CAAA,QAAS,QAAQ,KAAK,CAAC,UAAU;AAG1C,2CAA2C;AAC3C,IAAI,WAAW,EAAE;AAEjB,SAAS,QAAQ,eAAe,EAAE,WAAW,EAAE,OAAO,EAAE,cAAc,EAAE,aAAa,EAAE,gBAAgB;IACrG,IAAI,OAAO;QACT;QACA;QACA;QACA;QACA;QACA;IACF;IAEA,qCAAqC;IACrC,SAAS,IAAI,CAAC;IAEd,+DAA+D;IAC/D,WAAW;AACb;AAGA,2CAA2C;AAC3C,SAAS,WAAW,IAAI;IACtB,IAAI,OAAO,SAAS,aAAa,CAAC;IAClC,KAAK,SAAS,GAAG,QAAQ,KAAK,eAAe,GAAG;IAEhD,SAAS,WAAW,CAAC;IAErB,mCAAmC;IACnC,IAAI,YAAY,SAAS,aAAa,CAAC;IACvC,IAAI,gBAAgB,SAAS,cAAc,CAAC;IAC5C,UAAU,WAAW,CAAC;IACtB,KAAK,WAAW,CAAC,YAAY,qCAAqC;IAElE,uBAAuB;IACvB,UAAU,gBAAgB,CAAC,SAAS,SAAS,KAAK;QAChD,KAAK,MAAM,IAAI,yDAAyD;IACxE,+HAA+H;IACjI;IAEA,wEAAwE;IACxE,KAAK,KAAK;AACZ","sources":["src/script.js"],"sourcesContent":["// Setting up variables for our HTML elements using DOM selection\r\nconst form = document.getElementById(\"taskform\");\r\nconst button = document.querySelector(\"#taskform > button\"); // Complex CSS query\r\nconst tasklist = document.getElementById(\"tasklist\");\r\nconst taskInput = document.getElementById(\"taskInput\");\r\n\r\n\r\n// Event listener for Button click\r\n// This could also be form.addEventListener(\"submit\", function() {...} )\r\nbutton.addEventListener(\"click\", function(event) {\r\n  event.preventDefault(); // Not as necessary for button, but needed for form submit\r\n\r\n  let task = form.elements.task.value; // could be swapped out for line below\r\n  //let task = taskInput.value;\r\n\r\n  let date = (new Date()).toLocaleDateString('en-US') //Convert to short date format\r\n\r\n  // Call the addTask() function using\r\n  addTask(task, date, \"26/03/2021\", \"Low\", [\"1\", \"30\"], false);\r\n\r\n  // Log out the newly populated taskList everytime the button has been pressed\r\n  console.log(taskList);\r\n})\r\n\r\nasync function fetchData() {\r\n  try {\r\n    const response = await fetch(\"https://api.rawg.io/docs/?format=openapi\");\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! Status: ${response.status}`);\r\n    }\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error(\"Error fetching data:\", error);\r\n    return null;\r\n  }\r\n}\r\n\r\n// Example usage:\r\nfetchData()\r\n  .then(data => {\r\n    if (data) {\r\n      console.log(\"Fetched data:\", data);\r\n      // You can do something with the fetched data here\r\n    } else {\r\n      console.log(\"No data fetched.\");\r\n    }\r\n  })\r\n  .catch(error => console.error(\"Error:\", error));\r\n\r\n\r\n// Create an empty array to store our tasks\r\nvar taskList = [];\r\n\r\nfunction addTask(taskDescription, createdDate, dueDate, priorityRating, estimatedTime, completionStatus) {\r\n  let task = {\r\n    taskDescription,\r\n    createdDate,\r\n    dueDate,\r\n    priorityRating,\r\n    estimatedTime,\r\n    completionStatus\r\n  };\r\n\r\n  // Add the task to our array of tasks\r\n  taskList.push(task);\r\n\r\n  // Separate the DOM manipulation from the object creation logic\r\n  renderTask(task);\r\n}\r\n\r\n\r\n// Function to display the item on the page\r\nfunction renderTask(task) {\r\n  let item = document.createElement(\"li\");\r\n  item.innerHTML = \"<p>\" + task.taskDescription + \"</p>\";\r\n\r\n  tasklist.appendChild(item);\r\n\r\n  // Setup delete button DOM elements\r\n  let delButton = document.createElement(\"button\");\r\n  let delButtonText = document.createTextNode(\"Delete\");\r\n  delButton.appendChild(delButtonText);\r\n  item.appendChild(delButton); // Adds a delete button to every task\r\n\r\n  // Listen for when the \r\n  delButton.addEventListener(\"click\", function(event){\r\n    item.remove(); // Remove the task item from the page when button clicked\r\n    // Because we used 'let' to define the item, this will always delete the right element. this is straight up wrong. silly stuff.\r\n  })\r\n  \r\n  // Clear the value of the input once the task has been added to the page\r\n  form.reset();\r\n}"],"names":[],"version":3,"file":"index.44983732.js.map","sourceRoot":"/__parcel_source_root/"}